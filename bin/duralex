#!/usr/bin/env python3
# -*- coding=utf-8 -*-

import codecs
import os
import json
import sys
import argparse
import logging

import requests

sys.path.insert(0, os.path.join(os.path.realpath(os.path.dirname(__file__)), '..'))

import duralex.alinea_parser
import duralex.bill_parser
import duralex.amendment_parser
import duralex.diff_parser
from duralex.DeleteEmptyChildrenVisitor import DeleteEmptyChildrenVisitor
from duralex.DeleteParentVisitor import DeleteParentVisitor
from duralex.DeleteUUIDVisitor import DeleteUUIDVisitor
from duralex.ForkReferenceVisitor import ForkReferenceVisitor
from duralex.SortReferencesVisitor import SortReferencesVisitor
from duralex.ResolveFullyQualifiedReferencesVisitor import ResolveFullyQualifiedReferencesVisitor
from duralex.ResolveFullyQualifiedDefinitionsVisitor import ResolveFullyQualifiedDefinitionsVisitor
from duralex.RemoveQuotePrefixVisitor import RemoveQuotePrefixVisitor
from duralex.FixMissingCodeOrLawReferenceVisitor import FixMissingCodeOrLawReferenceVisitor
from duralex.SwapDefinitionAndReferenceVisitor import SwapDefinitionAndReferenceVisitor
from duralex.ResolveLookbackReferencesVisitor import ResolveLookbackReferencesVisitor

LOG_LEVEL = [
    'CRITICAL',
    'ERROR',
    'WARNING',
    'INFO',
    'DEBUG',
]

LOGGER = logging.getLogger('main')

def decode(data):
    try:
        data = data.decode('utf-8')
        LOGGER.info('content decoded as utf-8')
    except:
        try:
            data = data.decode('iso-8859-1')
            LOGGER.info('content decoded as iso-8859-1')
        except:
            pass

    return data

def handle_data(data, args):
    if data.startswith('diff'):
        tree = duralex.tree.create_node(None, {})
        duralex.diff_parser.parse(data, tree)
    else:
        bill_data = duralex.bill_parser.parse_bill(data, args.url)
        tree = duralex.tree.create_node(None, {})
        for field in ['id', 'type', 'legislature', 'url', 'description', 'date', 'place']:
            if field in bill_data:
                tree[field] = bill_data[field]

        duralex.alinea_parser.parse(bill_data, tree)

        if args.amendments:
            if args.amendments == '-':
                amendment_url = (
                    'https://www.nosdeputes.fr/'
                    + str(bill_data['legislature'])
                    + '/amendements/'
                    + str(bill_data['id'])
                    + '/json'
                )
                amendments = requests.get(amendment_url).text
            else:
                amendments = open(args.amendments, 'r').read()
            amendments = decode(amendments)
            amendments = json.loads(amendments)
            duralex.amendment_parser.parse(amendments, tree)

    LOGGER.info('running visitors')

    ResolveLookbackReferencesVisitor().visit(tree)
    ForkReferenceVisitor().visit(tree)
    ResolveFullyQualifiedDefinitionsVisitor().visit(tree)
    ResolveFullyQualifiedReferencesVisitor().visit(tree)
    FixMissingCodeOrLawReferenceVisitor().visit(tree)
    SortReferencesVisitor().visit(tree)
    SwapDefinitionAndReferenceVisitor().visit(tree)
    RemoveQuotePrefixVisitor().visit(tree)

    if not args.uuid:
        DeleteUUIDVisitor().visit(tree)

    DeleteParentVisitor().visit(tree)
    DeleteEmptyChildrenVisitor().visit(tree)

    if not args.quiet:
        LOGGER.info('dumping JSON tree to stdout')

        json_data = json.dumps(tree, sort_keys=True, indent=2, ensure_ascii=False)
        sys.stdout.write(json_data)

def main(argv=None):
    parser = argparse.ArgumentParser(prog='duralex')
    parser.add_argument('--file', help='the path of the bill to process', default='-')
    parser.add_argument('--url', help='the URL of the bill to process')
    parser.add_argument('--quiet', action='store_true', help='no stdout output')
    parser.add_argument('--uuid', action='store_true', help='add a unique ID on each node')
    parser.add_argument('--amendments', nargs='?', const='-', default=False, help='fetch and parse amendements')
    parser.add_argument('-v', '--verbose', action='count', default=0)

    args = parser.parse_args()

    logging.basicConfig(level=LOG_LEVEL[args.verbose], format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

    if args.url:
        LOGGER.info('reading content from URL %s', args.url)
        res = requests.get(args.url)
        data = decode(res.content)
    elif args.file:
        if args.file == '-':
            LOGGER.info('reading content from stdin')
            data = decode(sys.stdin.buffer.read())
        else:
            LOGGER.info('reading content from file %s', args.file)
            f = open(args.file, 'rb')
            data = decode(f.read())
            f.close()

    handle_data(data, args)

    return 0

if __name__ == "__main__":
    if sys.version_info < (3,0):
        raise Exception(
            'DuraLex requires Python 3.0+, current version is '
            + str(sys.version_info[0]) + '.' + str(sys.version_info[1])
        )

    sys.exit(main())
