#!/usr/bin/env python
# -*- coding=utf-8 -*-

import codecs
import os
import json
import sys
import argparse
import urllib2

sys.path.insert(0, os.path.join(os.path.realpath(os.path.dirname(__file__)), '..'))

import duralex.alinea_parser
import duralex.bill_parser
import duralex.amendment_parser
import duralex.ast
from duralex.DeleteEmptyChildrenVisitor import DeleteEmptyChildrenVisitor
from duralex.DeleteParentVisitor import DeleteParentVisitor
from duralex.DeleteUUIDVisitor import DeleteUUIDVisitor
from duralex.ForkReferenceVisitor import ForkReferenceVisitor
from duralex.SortReferencesVisitor import SortReferencesVisitor
from duralex.ResolveFullyQualifiedReferencesVisitor import ResolveFullyQualifiedReferencesVisitor
from duralex.ResolveFullyQualifiedDefinitionsVisitor import ResolveFullyQualifiedDefinitionsVisitor
from duralex.RemoveQuotePrefixVisitor import RemoveQuotePrefixVisitor

def decode(data):
    try:
        data = data.decode('utf-8')
    except:
        try:
            data = data.decode('iso-8859-1')
        except:
            pass

    return data

def handle_data(data, args):
    bill_data = duralex.bill_parser.parse_bill(data, args.url)
    ast = duralex.ast.create_node(None, {})
    for field in ['id', 'type', 'legislature', 'url', 'description', 'date', 'place']:
        if field in bill_data:
            ast[field] = bill_data[field]

    duralex.alinea_parser.parse(bill_data, ast)

    if args.amendments:
        amendement_url = (
            'https://www.nosdeputes.fr/'
            + str(bill_data['legislature'])
            + '/amendements/'
            + str(bill_data['id'])
            + '/json'
        )
        amendements = urllib2.urlopen(amendement_url).read()
        amendements = decode(amendements)
        amendements = json.loads(amendements)
        duralex.amendment_parser.parse(amendements, ast);

    ForkReferenceVisitor().visit(ast)
    ResolveFullyQualifiedDefinitionsVisitor().visit(ast)
    ResolveFullyQualifiedReferencesVisitor().visit(ast)
    SortReferencesVisitor().visit(ast)
    RemoveQuotePrefixVisitor().visit(ast)

    if not args.uuid:
        DeleteUUIDVisitor().visit(ast)

    DeleteParentVisitor().visit(ast)
    DeleteEmptyChildrenVisitor().visit(ast)

    if not args.quiet:
        json_data = json.dumps(ast, sort_keys=True, indent=2, ensure_ascii=False).encode('utf-8')
        sys.stdout.write(json_data)

def main(argv=None):
    parser = argparse.ArgumentParser(prog='duralex')
    parser.add_argument('--file', help='the path of the bill to process', type=argparse.FileType('r'), default='-')
    parser.add_argument('--url', help='the URL of the bill to process')
    parser.add_argument('--quiet', action='store_true', help='no stdout output')
    parser.add_argument('--uuid', action='store_true', help='add a unique ID on each node')
    parser.add_argument('--amendments', action='store_true', help='fetch and parse amendements')

    args = parser.parse_args()

    if args.url:
        data = urllib2.urlopen(args.url).read()
    elif args.file:
        data = args.file.read()

    data = decode(data)

    handle_data(data, args)

    return 0

if __name__ == "__main__":
    sys.exit(main())
